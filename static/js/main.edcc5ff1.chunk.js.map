{"version":3,"sources":["components/AppHeader/logo.svg","components/AccountBalance/AccountBalance.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/AppHeader/AppHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","styled","section","AccountBalance","props","buttonText","showBalance","balanceText","amount","onClick","e","preventDefault","handleBalance","Td","td","Coin","balance","name","ticker","price","action","method","handleRefresh","id","Table","table","CoinList","coinData","map","key","Img","img","Header","header","AppHeader","src","logo","alt","Component","Div","div","formatPrice","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","keyToRefresh","tickerUrl","newCoinPrice","newCoinData","values","newValues","showBalanceChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.edcc5ff1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Section = styled.section`\n  font-size: 2rem;\n  text-align: left;\n  padding: 1.5rem 0 1.5rem 5rem;\n`;\n\nexport default function AccountBalance(props) {\n\n  const handleClick = (e) => {\n    //prevent default action of submitting form\n    e.preventDefault();\n    props.handleBalance(props.showBalance);\n  }\n\n  const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\n  const balanceText = props.showBalance ? props.amount : 'XXXXX';\n\n  return (\n    <Section>\n      Balance: $ {balanceText}\n      <button onClick={handleClick}>{buttonText}</button>\n    </Section>\n  )\n}\n\nAccountBalance.propTypes = {\n    amount: PropTypes.number.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\n/*\n.coin-row td{\n    border: 1px solid #cccccc;\n    width: 25vh;\n}\n*/\n\nconst Td = styled.td`\n    border: 1px solid #cccccc;\n    width: 25vh;\n`;\n\nexport default function Coin(props) {\n    /*\n    componentDidMount(){\n        const callback = () => {\n            // set the state to a new random value\n            const randomPercentage = 0.995 + Math.random() * 0.01;\n            \n            this.setState(function(oldState){\n                return {\n                    price: oldState.price * randomPercentage\n                }\n            })\n        }\n        setInterval(callback, 1000);\n    }\n    */\n    const handleClick = (e) => {\n        //prevent default action of submitting form\n        e.preventDefault();\n        props.handleRefresh(props.id);\n\n    }\n    const balanceText = props.showBalance ? props.balance: 'XXXXX';\n    return (\n        <tr>\n            <Td>{props.name}</Td>\n            <Td>{props.ticker}</Td>\n            <Td>$ {props.price}</Td>\n            <Td>$ {balanceText}</Td>\n            <Td>\n                <form action=\"$\" method=\"POST\">\n                    <button onClick={handleClick}>Refresh</button>\n                </form>\n\n            </Td>\n        </tr>\n    )\n}\n\nCoin.propTypes = {\n    name: PropTypes.string.isRequired,\n    ticker: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    balance: PropTypes.number.isRequired\n}","import React from 'react';\nimport Coin from '../Coin/Coin';\nimport styled from 'styled-components';\n\nconst Table = styled.table`\n    margin: 50px auto 50px auto;\n    display: inline-block;\n    font-size: 1.4rem;\n`;\n\nexport default function CoinList(props) {\n\n  return (\n    <div>\n      <Table>\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Ticker</th>\n                <th>Price</th>\n                <th>Balance</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody>\n          {\n            props.coinData.map( ({key, name, ticker, price, balance}) =>\n              <Coin key={key}\n                    id={key}\n                    handleRefresh={props.handleRefresh}\n                    name={name}\n                    ticker={ticker}\n                    price={price}\n                    balance={balance}\n                    showBalance={props.showBalance}/>\n              )\n          }\n        </tbody>\n      </Table>\n    </div>\n  )\n}\n\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport styled from 'styled-components';\n\n\n\nconst Img = styled.img`\n  height: 40vmin;\n  pointer-events: none;\n`;\n\nconst Header = styled.header`\n  background-color: #282c34;\n  min-height: 50vh;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nexport default class AppHeader extends Component {\n  render() {\n    return (\n      <div>\n        <Header>\n          <Img src={logo} alt=\"logo\" />\n          <h1>\n            Coin Exchange!\n          </h1>\n        </Header>\n      </div>\n    )\n  }\n}\n","import AccountBalance from './components/AccountBalance/AccountBalance';\nimport React, {useEffect, useState} from 'react';\nimport CoinList from './components/CoinList/CoinList';\nimport AppHeader from './components/AppHeader/AppHeader';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: darkblue;\n  color: #cccccc;\n`;\n\nconst COIN_COUNT = 10;\nconst formatPrice = price => parseFloat(Number(price).toFixed(4))\n\nfunction App(props) {\n  /*\n  state = {\n    balance: 10000,\n    showBalance: true,\n    coinData: [],\n  }\n*/\n  // hooks\n  const [balance, setBalance] = useState(10000); //initialise the state\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n\n  /* another method with complex object\n    const [state, setState] = useState({\n    balance: 10000,\n    showBalance: true,\n    coinData: [],\n  })\n  be careful using this, need to use oldState, so you don't overwrite it.\n    */\n\n  const componentDidMount = async() => {\n    //use async await instead of going into call back hell\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n    const coinIds = response.data.slice(0, COIN_COUNT).map( coin => coin.id );\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(function(response) {\n    const coin = response.data;\n    return{\n      key: coin.id,\n      name: coin.name,\n      ticker: coin.symbol,\n      balance: 0,\n      price: formatPrice(coin.quotes.USD.price),\n        }\n      }\n    )\n  //retrieve the prices\n  setCoinData(coinPriceData);\n  }\n\n  // only load data if we need it\n  useEffect(function() { \n    if (coinData.length === 0){\n      // component did mount\n      componentDidMount();\n\n    } else {\n      // component did update\n    }\n  });\n\n  const handleRefresh = async(keyToRefresh) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${keyToRefresh}`;\n    const response = await axios.get(tickerUrl);\n    // debugger;\n    const newCoinPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map( function (values){\n      let newValues = {...values}; //shallow clone\n      if (keyToRefresh === values.key){\n        newValues.price = newCoinPrice;  \n      }\n      return newValues;\n    });\n    setCoinData(newCoinData);\n  }\n  \n  const handleBalance = (showBalanceChange) => {\n    let newShowBalance;\n    if (showBalanceChange === true){\n      newShowBalance = false;\n    } else {\n      newShowBalance = true;\n    }\n    setShowBalance(newShowBalance);\n  }\n\n\n  return (\n    <Div>\n      <AppHeader />\n      <AccountBalance\n        amount={balance}\n        showBalance={showBalance}\n        handleBalance={handleBalance} />\n      <CoinList\n        coinData={coinData}\n        showBalance={showBalance}\n        handleRefresh={handleRefresh} />\n    </Div>\n  );\n}\n\nexport default App;\n\n /* get API data instead\n      {\n        name: \"brenoCoin\",\n        ticker: \"BC\",\n        price: 9999.99,\n        balance: 200,\n      },\n      {\n        name: \"ethereum\",\n        ticker: \"ETH\",\n        price: 299.99,\n        balance: 10,\n      },\n      {\n        name: \"tether\",\n        ticker: \"USDT\",\n        price: 1,\n        balance: 0,\n      },\n      {\n        name: \"theta\",\n        ticker: \"THETA\",\n        price: 13423.99,\n        balance: 2000,\n      }\n      */","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}